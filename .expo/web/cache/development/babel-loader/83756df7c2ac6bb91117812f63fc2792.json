{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Box, Heading, VStack, FormControl, Input, Button, Center, NativeBaseProvider, ScrollView, CheckIcon, Select } from \"native-base\";\nimport config from \"../config/default.json\";\nimport axios from 'axios';\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar RegisterScreen = function RegisterScreen() {\n  var navigation = useNavigation();\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      firstName = _useState2[0],\n      setFirstName = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      lastName = _useState4[0],\n      setLastName = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      password = _useState6[0],\n      setPassword = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      email = _useState8[0],\n      setEmail = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      gender = _useState10[0],\n      setGender = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      condition = _useState12[0],\n      setCondition = _useState12[1];\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      genderList = _useState14[0],\n      setGenderList = _useState14[1];\n\n  var _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      conditionsList = _useState16[0],\n      setConditionList = _useState16[1];\n\n  var baseUrl = config.baseUrl;\n\n  var getGenders = function _callee() {\n    var response;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(baseUrl + \"/gender/GetGenders\"));\n\n          case 3:\n            response = _context.sent;\n            setGenderList(response.data);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  var getConditions = function _callee2() {\n    var response;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(baseUrl + \"/condition/GetConditions\"));\n\n          case 3:\n            response = _context2.sent;\n            setConditionList(response.data);\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  var Register = function _callee3() {\n    var setup, body, res;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            setup = {\n              headers: {\n                'content-type': 'application/json'\n              }\n            };\n            body = JSON.stringify({\n              firstName: firstName,\n              lastName: lastName,\n              password: password,\n              email: email,\n              gender: gender,\n              condition: condition\n            });\n            _context3.prev = 2;\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(axios.post(baseUrl + \"/users/\", body, setup));\n\n          case 5:\n            res = _context3.sent;\n            navigation.navigate('RegisterSuccess');\n            console.log(res.data);\n            console.log(res);\n            _context3.next = 15;\n            break;\n\n          case 11:\n            _context3.prev = 11;\n            _context3.t0 = _context3[\"catch\"](2);\n            console.log(\"Here\");\n            navigation.navigate('RegisterFailed');\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[2, 11]], Promise);\n  };\n\n  useEffect(function () {\n    getGenders();\n    getConditions();\n  }, []);\n  return _jsx(Center, {\n    w: \"100%\",\n    children: _jsx(ScrollView, {\n      maxW: \"400\",\n      h: \"600\",\n      style: styles.scrollView,\n      _contentContainerStyle: {\n        px: \"20px\",\n        mb: \"4\",\n        minW: \"72\"\n      },\n      children: _jsxs(Box, {\n        safeArea: true,\n        p: \"2\",\n        w: \"90%\",\n        maxW: \"290\",\n        py: \"8\",\n        children: [_jsx(Heading, {\n          size: \"lg\",\n          color: \"coolGray.800\",\n          _dark: {\n            color: \"warmGray.50\"\n          },\n          fontWeight: \"semibold\",\n          children: \"RecetApp\"\n        }), _jsx(Heading, {\n          mt: \"1\",\n          color: \"coolGray.600\",\n          _dark: {\n            color: \"warmGray.200\"\n          },\n          fontWeight: \"medium\",\n          size: \"xs\",\n          children: \"Ingres\\xE1 tus datos\"\n        }), _jsxs(VStack, {\n          space: 3,\n          mt: \"5\",\n          children: [_jsxs(FormControl, {\n            isRequired: true,\n            children: [_jsx(FormControl.Label, {\n              children: \"Email\"\n            }), _jsx(Input, {\n              value: email,\n              onChangeText: setEmail\n            })]\n          }), _jsxs(FormControl, {\n            isRequired: true,\n            children: [_jsx(FormControl.Label, {\n              children: \"Usuario\"\n            }), _jsx(Input, {\n              value: firstName,\n              onChangeText: setFirstName\n            })]\n          }), _jsx(Button, {\n            mt: \"2\",\n            colorScheme: \"indigo\",\n            onPress: Register,\n            children: \"Registrarse\"\n          })]\n        })]\n      })\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  scrollView: {\n    marginHorizontal: 1,\n    marginVertical: 1\n  },\n  text: {\n    fontSize: 42\n  }\n});\nexport default (function () {\n  return _jsx(NativeBaseProvider, {\n    children: _jsx(Center, {\n      flex: 1,\n      px: \"3\",\n      children: _jsx(RegisterScreen, {})\n    })\n  });\n});","map":{"version":3,"names":["React","useState","useEffect","Box","Heading","VStack","FormControl","Input","Button","Center","NativeBaseProvider","ScrollView","CheckIcon","Select","config","axios","useNavigation","RegisterScreen","navigation","firstName","setFirstName","lastName","setLastName","password","setPassword","email","setEmail","gender","setGender","condition","setCondition","genderList","setGenderList","conditionsList","setConditionList","baseUrl","getGenders","get","response","data","console","log","getConditions","Register","setup","headers","body","JSON","stringify","post","res","navigate","styles","scrollView","px","mb","minW","color","StyleSheet","create","marginHorizontal","marginVertical","text","fontSize"],"sources":["C:/Users/German/recetas-front/src/screens/RegisterScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { StyleSheet} from 'react-native';\r\nimport { \r\n  Box,\r\n  Heading,\r\n  VStack, \r\n  FormControl, \r\n  Input, \r\n  Button, \r\n  Center, \r\n  NativeBaseProvider, \r\n  ScrollView,\r\n  CheckIcon,\r\n  Select } from \"native-base\";\r\n  import config from \"../config/default.json\";\r\n  import axios from 'axios'\r\n  import { useNavigation } from '@react-navigation/native';\r\n\r\n  const RegisterScreen = () => {\r\n\r\n    const navigation = useNavigation();\r\n    const [ firstName, setFirstName] = useState(\"\");\r\n    const [ lastName , setLastName]  = useState(\"\");\r\n    const [ password , setPassword] = useState(\"\");\r\n    const [ email    , setEmail] = useState(\"\");\r\n    const [ gender   , setGender] = useState(\"\");\r\n    const [ condition, setCondition]= useState(\"\");\r\n    \r\n    const [ genderList, setGenderList] = useState([]); \r\n    const [ conditionsList, setConditionList] = useState([]); \r\n\r\n    const baseUrl =  config.baseUrl;\r\n\r\n    const getGenders = async () => {\r\n      try{\r\n        const response = await axios.get(`${baseUrl}/gender/GetGenders`)\r\n        setGenderList(response.data)\r\n      }catch(error){\r\n        console.log(error)\r\n      }    \r\n    }\r\n    const getConditions = async () => {\r\n      try{\r\n        const response = await axios.get(`${baseUrl}/condition/GetConditions`);\r\n        setConditionList(response.data);\r\n      }catch(error){\r\n        console.log(error)\r\n      } \r\n    }\r\n\r\n    const Register = async () => {\r\n\r\n      const setup = {\r\n        headers:{\r\n          'content-type' : 'application/json'\r\n        }\r\n      }\r\n      const body = JSON.stringify({firstName,lastName,password,email, gender, condition})\r\n\r\n      try {\r\n        const res = await axios.post(`${baseUrl}/users/`,body,setup);\r\n        navigation.navigate('RegisterSuccess')\r\n        console.log(res.data);\r\n        console.log(res)\r\n      }catch(error){\r\n        console.log(\"Here\")\r\n        navigation.navigate('RegisterFailed')\r\n      }\r\n    }\r\n\r\n    useEffect(() => {\r\n      getGenders();\r\n      getConditions();\r\n    },[]);\r\n\r\n  return <Center w=\"100%\">\r\n     <ScrollView maxW=\"400\" h=\"600\" style={styles.scrollView} _contentContainerStyle={{\r\n      px: \"20px\",\r\n      mb: \"4\",\r\n      minW: \"72\"\r\n    }}>\r\n      <Box safeArea p=\"2\" w=\"90%\" maxW=\"290\" py=\"8\">\r\n        <Heading size=\"lg\" color=\"coolGray.800\" _dark={{\r\n        color: \"warmGray.50\"\r\n      }} fontWeight=\"semibold\">\r\n          RecetApp\r\n        </Heading>\r\n        <Heading mt=\"1\" color=\"coolGray.600\" _dark={{\r\n        color: \"warmGray.200\"\r\n      }} fontWeight=\"medium\" size=\"xs\">\r\n          Ingresá tus datos\r\n        </Heading>\r\n        <VStack space={3} mt=\"5\">\r\n        {/* <FormControl isRequired>\r\n            <FormControl.Label>Nombre</FormControl.Label>\r\n            <Input \r\n              value={firstName}\r\n              onChangeText={setFirstName}\r\n            />\r\n        </FormControl> */}\r\n        {/* <FormControl isRequired>\r\n            <FormControl.Label>Apellido</FormControl.Label>\r\n            <Input \r\n              value={lastName}\r\n              onChangeText={setLastName}/>\r\n        </FormControl> */}\r\n        <FormControl isRequired>\r\n            <FormControl.Label>Email</FormControl.Label>\r\n            <Input \r\n              value={email}\r\n              onChangeText={setEmail}/>\r\n          </FormControl>\r\n          <FormControl isRequired>\r\n            <FormControl.Label>Usuario</FormControl.Label>\r\n            <Input \r\n              value={firstName}\r\n              onChangeText={setFirstName}\r\n            />\r\n        </FormControl>\r\n          {/* <FormControl isRequired>\r\n            <FormControl.Label>Password</FormControl.Label>\r\n            <Input \r\n              type=\"password\" \r\n              value={password}\r\n              onChangeText={setPassword}/>\r\n          </FormControl> */}\r\n          \r\n          {/* <FormControl w=\"3/4\" maxW=\"300\">\r\n            <FormControl.Label>Genero</FormControl.Label>\r\n              <Select \r\n                selectedValue={gender}\r\n                minWidth=\"200\" \r\n                _selectedItem={{\r\n                bg: \"indigo\",\r\n                endIcon: <CheckIcon size={5} />\r\n                }} \r\n                mt=\"1\"\r\n                onValueChange={itemValue =>setGender(itemValue)}>\r\n                  {genderList.map( (gender) => (\r\n                    <Select.Item key={gender._id} label={gender.desc} value={gender.desc} />\r\n                  ))}\r\n              </Select>\r\n          </FormControl> */}\r\n\r\n          {/* <FormControl w=\"3/4\" maxW=\"300\" isRequired>\r\n            <FormControl.Label>Condicion</FormControl.Label>\r\n              <Select \r\n                selectedValue={condition}\r\n                minWidth=\"200\" \r\n                _selectedItem={{\r\n                bg: \"indigo\",\r\n                endIcon: <CheckIcon size={5} />\r\n                }} \r\n                mt=\"1\"\r\n                onValueChange={itemValue =>setCondition(itemValue)}>\r\n                  {conditionsList.map( (condition) => (\r\n                    <Select.Item key={condition._id} label={condition.desc} value={condition.desc} />\r\n                  ))}          \r\n              </Select>\r\n      </FormControl> */}\r\n          <Button mt=\"2\" colorScheme=\"indigo\" onPress={Register}>\r\n            Registrarse\r\n          </Button>\r\n        </VStack>\r\n      </Box>\r\n      </ScrollView>\r\n    </Center>;\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n\r\n  scrollView: {\r\n    marginHorizontal: 1,\r\n    marginVertical: 1,\r\n  },\r\n  text: {\r\n    fontSize: 42,\r\n  },\r\n});\r\n\r\n    export default () => {\r\n        return (\r\n          <NativeBaseProvider>\r\n            <Center flex={1} px=\"3\">\r\n                <RegisterScreen />\r\n            </Center>\r\n          </NativeBaseProvider>\r\n        );\r\n    };\r\n    "],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,SACEC,GADF,EAEEC,OAFF,EAGEC,MAHF,EAIEC,WAJF,EAKEC,KALF,EAMEC,MANF,EAOEC,MAPF,EAQEC,kBARF,EASEC,UATF,EAUEC,SAVF,EAWEC,MAXF,QAWgB,aAXhB;AAYE,OAAOC,MAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,0BAA9B;;;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;EAE3B,IAAMC,UAAU,GAAGF,aAAa,EAAhC;;EACA,gBAAmCf,QAAQ,CAAC,EAAD,CAA3C;EAAA;EAAA,IAAQkB,SAAR;EAAA,IAAmBC,YAAnB;;EACA,iBAAmCnB,QAAQ,CAAC,EAAD,CAA3C;EAAA;EAAA,IAAQoB,QAAR;EAAA,IAAmBC,WAAnB;;EACA,iBAAkCrB,QAAQ,CAAC,EAAD,CAA1C;EAAA;EAAA,IAAQsB,QAAR;EAAA,IAAmBC,WAAnB;;EACA,iBAA+BvB,QAAQ,CAAC,EAAD,CAAvC;EAAA;EAAA,IAAQwB,KAAR;EAAA,IAAmBC,QAAnB;;EACA,iBAAgCzB,QAAQ,CAAC,EAAD,CAAxC;EAAA;EAAA,IAAQ0B,MAAR;EAAA,IAAmBC,SAAnB;;EACA,kBAAkC3B,QAAQ,CAAC,EAAD,CAA1C;EAAA;EAAA,IAAQ4B,SAAR;EAAA,IAAmBC,YAAnB;;EAEA,kBAAqC7B,QAAQ,CAAC,EAAD,CAA7C;EAAA;EAAA,IAAQ8B,UAAR;EAAA,IAAoBC,aAApB;;EACA,kBAA4C/B,QAAQ,CAAC,EAAD,CAApD;EAAA;EAAA,IAAQgC,cAAR;EAAA,IAAwBC,gBAAxB;;EAEA,IAAMC,OAAO,GAAIrB,MAAM,CAACqB,OAAxB;;EAEA,IAAMC,UAAU,GAAG;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA;YAAA,iCAEQrB,KAAK,CAACsB,GAAN,CAAaF,OAAb,wBAFR;;UAAA;YAETG,QAFS;YAGfN,aAAa,CAACM,QAAQ,CAACC,IAAV,CAAb;YAHe;YAAA;;UAAA;YAAA;YAAA;YAKfC,OAAO,CAACC,GAAR;;UALe;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAnB;;EAQA,IAAMC,aAAa,GAAG;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA;YAAA,iCAEK3B,KAAK,CAACsB,GAAN,CAAaF,OAAb,8BAFL;;UAAA;YAEZG,QAFY;YAGlBJ,gBAAgB,CAACI,QAAQ,CAACC,IAAV,CAAhB;YAHkB;YAAA;;UAAA;YAAA;YAAA;YAKlBC,OAAO,CAACC,GAAR;;UALkB;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAtB;;EASA,IAAME,QAAQ,GAAG;IAAA;IAAA;MAAA;QAAA;UAAA;YAETC,KAFS,GAED;cACZC,OAAO,EAAC;gBACN,gBAAiB;cADX;YADI,CAFC;YAOTC,IAPS,GAOFC,IAAI,CAACC,SAAL,CAAe;cAAC7B,SAAS,EAATA,SAAD;cAAWE,QAAQ,EAARA,QAAX;cAAoBE,QAAQ,EAARA,QAApB;cAA6BE,KAAK,EAALA,KAA7B;cAAoCE,MAAM,EAANA,MAApC;cAA4CE,SAAS,EAATA;YAA5C,CAAf,CAPE;YAAA;YAAA;YAAA,iCAUKd,KAAK,CAACkC,IAAN,CAAcd,OAAd,cAA+BW,IAA/B,EAAoCF,KAApC,CAVL;;UAAA;YAUPM,GAVO;YAWbhC,UAAU,CAACiC,QAAX,CAAoB,iBAApB;YACAX,OAAO,CAACC,GAAR,CAAYS,GAAG,CAACX,IAAhB;YACAC,OAAO,CAACC,GAAR,CAAYS,GAAZ;YAba;YAAA;;UAAA;YAAA;YAAA;YAebV,OAAO,CAACC,GAAR,CAAY,MAAZ;YACAvB,UAAU,CAACiC,QAAX,CAAoB,gBAApB;;UAhBa;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAjB;;EAoBAjD,SAAS,CAAC,YAAM;IACdkC,UAAU;IACVM,aAAa;EACd,CAHQ,EAGP,EAHO,CAAT;EAKF,OAAO,KAAC,MAAD;IAAQ,CAAC,EAAC,MAAV;IAAA,UACJ,KAAC,UAAD;MAAY,IAAI,EAAC,KAAjB;MAAuB,CAAC,EAAC,KAAzB;MAA+B,KAAK,EAAEU,MAAM,CAACC,UAA7C;MAAyD,sBAAsB,EAAE;QAChFC,EAAE,EAAE,MAD4E;QAEhFC,EAAE,EAAE,GAF4E;QAGhFC,IAAI,EAAE;MAH0E,CAAjF;MAAA,UAKC,MAAC,GAAD;QAAK,QAAQ,MAAb;QAAc,CAAC,EAAC,GAAhB;QAAoB,CAAC,EAAC,KAAtB;QAA4B,IAAI,EAAC,KAAjC;QAAuC,EAAE,EAAC,GAA1C;QAAA,WACE,KAAC,OAAD;UAAS,IAAI,EAAC,IAAd;UAAmB,KAAK,EAAC,cAAzB;UAAwC,KAAK,EAAE;YAC/CC,KAAK,EAAE;UADwC,CAA/C;UAEC,UAAU,EAAC,UAFZ;UAAA;QAAA,EADF,EAME,KAAC,OAAD;UAAS,EAAE,EAAC,GAAZ;UAAgB,KAAK,EAAC,cAAtB;UAAqC,KAAK,EAAE;YAC5CA,KAAK,EAAE;UADqC,CAA5C;UAEC,UAAU,EAAC,QAFZ;UAEqB,IAAI,EAAC,IAF1B;UAAA;QAAA,EANF,EAWE,MAAC,MAAD;UAAQ,KAAK,EAAE,CAAf;UAAkB,EAAE,EAAC,GAArB;UAAA,WAcA,MAAC,WAAD;YAAa,UAAU,MAAvB;YAAA,WACI,KAAC,WAAD,CAAa,KAAb;cAAA;YAAA,EADJ,EAEI,KAAC,KAAD;cACE,KAAK,EAAEhC,KADT;cAEE,YAAY,EAAEC;YAFhB,EAFJ;UAAA,EAdA,EAoBE,MAAC,WAAD;YAAa,UAAU,MAAvB;YAAA,WACE,KAAC,WAAD,CAAa,KAAb;cAAA;YAAA,EADF,EAEE,KAAC,KAAD;cACE,KAAK,EAAEP,SADT;cAEE,YAAY,EAAEC;YAFhB,EAFF;UAAA,EApBF,EAoEE,KAAC,MAAD;YAAQ,EAAE,EAAC,GAAX;YAAe,WAAW,EAAC,QAA3B;YAAoC,OAAO,EAAEuB,QAA7C;YAAA;UAAA,EApEF;QAAA,EAXF;MAAA;IALD;EADI,EAAP;AA4FD,CArJC;;AAuJF,IAAMS,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;EAE/BN,UAAU,EAAE;IACVO,gBAAgB,EAAE,CADR;IAEVC,cAAc,EAAE;EAFN,CAFmB;EAM/BC,IAAI,EAAE;IACJC,QAAQ,EAAE;EADN;AANyB,CAAlB,CAAf;AAWI,gBAAe,YAAM;EACjB,OACE,KAAC,kBAAD;IAAA,UACE,KAAC,MAAD;MAAQ,IAAI,EAAE,CAAd;MAAiB,EAAE,EAAC,GAApB;MAAA,UACI,KAAC,cAAD;IADJ;EADF,EADF;AAOH,CARD"},"metadata":{},"sourceType":"module"}